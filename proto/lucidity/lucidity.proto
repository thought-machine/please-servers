syntax = "proto3";

package build.please.remote.lucidity;

option go_package = "github.com/thought-machine/please-servers/proto/lucidity";

// The Lucidity service provides a small API for workers to report in to a
// central server and send some basic information about their status.
service Lucidity {
  // Update sends the server an update on the current state of a worker.
  rpc Update(Worker) returns (UpdateResponse);
  // List the current set of workers
  rpc ListWorkers(ListWorkersRequest) returns (ListWorkersResponse);
}

message Worker {
  // The name of this worker.
  string name = 1;
  // The host name of the machine the worker is on
  string hostname = 13;
  // The version this worker is currently at
  string version = 12;
  // The time the worker started at (as a Unix timestamp)
  int64 start_time = 2;
  // The time the server is reporting in at (the server may overwrite this)
  int64 update_time = 3;
  // A human-readable string describing the current state of the server.
  string status = 4;
  // Whether the worker currently considers itself healthy.
  bool healthy = 5;
  // Whether the worker was busy at the point it sent this request.
  bool busy = 6;
  // Whether the worker is now alive or not (note that it is possible to be
  // alive but unhealthy)
  bool alive = 7;
  // A URL containing the last unit of work the server performed.
  string last_task = 8;
  // Server-side only; indicates whether this server has been shut down.
  bool disabled = 9;
  // ID of the currently executing task, if there is one.
  string current_task = 10;
  // The time the current task was started at.
  int64 task_start_time = 11;
}

message UpdateResponse {
  // True if the receiving server should become unavailable until it receives
  // another response saying it's ok to come back to life again.
  bool should_disable = 1;
}

message ListWorkersRequest {
  // The worker name to return
  string name = 1;
  // The hostname to return workers for
  string hostname = 2;
}

message ListWorkersResponse {
  // List of all the currently known workers, optionally filtered on the
  // request.
  repeated Worker workers = 1;
}

// This is part of the HTTP API; the request to disable a worker.
message Disable {
  // Name of the worker to disable
  string name = 1;
  // If true, worker is disabled; if false, it will become enabled.
  bool disable = 2;
}
