// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lucidity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LucidityClient is the client API for Lucidity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LucidityClient interface {
	// Update sends the server an update on the current state of a worker.
	Update(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*UpdateResponse, error)
	// List the current set of workers
	ListWorkers(ctx context.Context, in *ListWorkersRequest, opts ...grpc.CallOption) (*ListWorkersResponse, error)
}

type lucidityClient struct {
	cc grpc.ClientConnInterface
}

func NewLucidityClient(cc grpc.ClientConnInterface) LucidityClient {
	return &lucidityClient{cc}
}

func (c *lucidityClient) Update(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/build.please.remote.lucidity.Lucidity/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lucidityClient) ListWorkers(ctx context.Context, in *ListWorkersRequest, opts ...grpc.CallOption) (*ListWorkersResponse, error) {
	out := new(ListWorkersResponse)
	err := c.cc.Invoke(ctx, "/build.please.remote.lucidity.Lucidity/ListWorkers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LucidityServer is the server API for Lucidity service.
// All implementations must embed UnimplementedLucidityServer
// for forward compatibility
type LucidityServer interface {
	// Update sends the server an update on the current state of a worker.
	Update(context.Context, *Worker) (*UpdateResponse, error)
	// List the current set of workers
	ListWorkers(context.Context, *ListWorkersRequest) (*ListWorkersResponse, error)
	mustEmbedUnimplementedLucidityServer()
}

// UnimplementedLucidityServer must be embedded to have forward compatible implementations.
type UnimplementedLucidityServer struct {
}

func (UnimplementedLucidityServer) Update(context.Context, *Worker) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedLucidityServer) ListWorkers(context.Context, *ListWorkersRequest) (*ListWorkersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkers not implemented")
}
func (UnimplementedLucidityServer) mustEmbedUnimplementedLucidityServer() {}

// UnsafeLucidityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LucidityServer will
// result in compilation errors.
type UnsafeLucidityServer interface {
	mustEmbedUnimplementedLucidityServer()
}

func RegisterLucidityServer(s grpc.ServiceRegistrar, srv LucidityServer) {
	s.RegisterService(&Lucidity_ServiceDesc, srv)
}

func _Lucidity_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LucidityServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.please.remote.lucidity.Lucidity/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LucidityServer).Update(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lucidity_ListWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LucidityServer).ListWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.please.remote.lucidity.Lucidity/ListWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LucidityServer).ListWorkers(ctx, req.(*ListWorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Lucidity_ServiceDesc is the grpc.ServiceDesc for Lucidity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lucidity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "build.please.remote.lucidity.Lucidity",
	HandlerType: (*LucidityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _Lucidity_Update_Handler,
		},
		{
			MethodName: "ListWorkers",
			Handler:    _Lucidity_ListWorkers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/lucidity/lucidity.proto",
}
